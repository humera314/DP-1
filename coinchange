class Solution:
    #TC:O(nxm)
    #O(nxm)
    def coinChange(self, coins: List[int], amount: int) -> int:
        ''' approach:
        initialize 2d array with including 0 index for row coin and amt col
        fill the 1st row with amt+1 and 0 col with 0
        if amt is less the the given coin take value from i-1 coin
        else find min from upper array or same row col- coin
        '''
        if coins is None or len(coins)==0:
            return -1
        
        dp = [[amount + 1] * (amount+1) for _ in  range(len(coins)+1)]
        
        
        for i in range(len(coins)+1):
            dp[i][0]=0
        
        for i in range(1,len(coins)+1):
            for j in range(1, amount+1):
                if j <coins[i-1]:
                    dp[i][j]=dp[i-1][j]
                else:
                    dp[i][j]=min(dp[i-1][j], 1+ dp[i][j-coins[i-1]]) 
                    #dp[2][j(i,11)-2]
        if dp[len(coins)][amount]==amount+1:
            return -1
        return dp[len(coins)][amount]
    
    #erroe correct initilization of 2D array

        
